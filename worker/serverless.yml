# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: your-worker-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  profile: your-profile-name
  region: your-region-name
  environment: ${file(./config/${self:provider.stage}.yml)}
  iamRoleStatements:
    - Effect: "Allow"
      Action: 
        - sqs:deleteMessage
      Resource: "*"

    - Effect: "Allow"
      Action:
        - sns:Publish
        - sns:CreateTopic
      Resource: ${self:custom.topic-arn}

# { "Fn::Join" : ["", ["arn:aws:sns:${self:provider.region}:", { "Ref" : "awsaccountId" }, ":SNS Topic Name" ] ]  }
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

custom: 
   topic-name: push-message-from-queue
   topic-arn: 
      Fn::Join:
        - ''
        - - 'arn:aws:sns:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Fn::GetAtt:
            - PushMessageFromQueue
            - TopicName
# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  pushNotification:
    handler: service/notification.push

  sendEmail:
    handler: service/email.send
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2
plugins:
  - serverless-sam  

resources:
  Resources:
     PushMessageFromQueue:
        Type: AWS::SNS::Topic
        Properties: 
          DisplayName: push-sqs
          TopicName: ${self:custom.topic-name}

     Subscription: 
        Type: AWS::SNS::Subscription
        Properties:
          Endpoint: your-email
          Protocol: email
          TopicArn: ${self:custom.topic-arn}
# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
